#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;
VERSION=v2.0;
TYPE=Release;
mount -o rw -t auto /system;

# Remove this shit if it exist
sed -i '/# ro.product.cpu.abi and ro.product.cpu.abi2 are obsolete,/d' /system/build.prop;
sed -i '/# use ro.product.cpu.abilist instead./d' /system/build.prop;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_perm_recursive() {
  dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    chown -R $1.$2 $i; chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}
file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; }
abort() { ui_print "$*"; umount /system; umount /data; exit 1; }

show_progress 1.34 4;
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print "==============================================|";
ui_print " ";
ui_print "       __       _______  ___________ ___  ___ ";
ui_print "      /''\     /'      \(      _   '('  \/'  )      ";
ui_print "     /    \   |  /-°    |\__/  °\ _/ \   \  /      ";
ui_print "    /  /\  \  |_____/   )   \°_ /    °\   \/        ";
ui_print "   /° /__\  \  /°      /    |   |     /\.  \        ";
ui_print "  /   /  \°  \|   __   \    \   |    /  \   \       ";
ui_print " (___/    \___|__|  \___)    \__|   (___/\___)        ";
ui_print " ";
ui_print "     ArtxPlay Kernel Project ";
ui_print "     AnyKernel by: XDA @osm0sis";
ui_print "     $VERSION-$TYPE by: XDA @Stayn             ";
ui_print " ";
ui_print "==============================================|";
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIP";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "[!] Unzip failed. Aborting...";
fi;
chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;
bb=/tmp/anykernel/tools/busybox;

ui_print " ";
ui_print "$(file_getprop /tmp/anykernel/anykernel.sh kernel.string)";
mount /data;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  ui_print "   - Checking device...";
  for i in 1 2 3 4 5 6 7; do
    testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
    if [ "$(getprop ro.product.device)" == "$testname" -o "$(getprop ro.build.product)" == "$testname" ]; then
      ui_print "       Device: $testname ";
      match=1;
    fi;
  done;
  if [ "$match" != 1 ]; then
    abort "[!]- Unsupported device. Aborting...";
  fi;
fi;

for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "[!] Recovery busybox setup failed. Aborting...";
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.setskiagl)" == 1 ]; then
  sed -i '/# Set SkiaGL Default renderer/d' /system/build.prop
  sed -i '/debug.hwui.renderer=skiagl/d' /system/build.prop
  echo "# Set SkiaGL Default renderer" >> /system/build.prop;
  echo "debug.hwui.renderer=skiagl" >> /system/build.prop;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  rm -rf /tmp/anykernel;
fi;

umount /system;
umount /data;
ui_print " ";
sync

